package main

import (
	"context"
	"fmt"
	"log"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/onlytenders/golang-subscriptions/docs" // docs is generated by Swag CLI
	"github.com/onlytenders/golang-subscriptions/internal/config"
	"github.com/onlytenders/golang-subscriptions/internal/handler"
	"github.com/onlytenders/golang-subscriptions/internal/repository/postgres"
	"github.com/onlytenders/golang-subscriptions/internal/service"
	"github.com/onlytenders/golang-subscriptions/pkg/logger"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/zap"
)

// @title Subscription Service API
// @version 1.0
// @description This is a sample server for a subscription management service.
// @host localhost:8080
// @BasePath /api
func main() {
	// Load configuration
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize logger
	appLogger, err := logger.NewLogger()
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer appLogger.Sync()

	// Run migrations
	connStr := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=%s",
		cfg.DB.User, cfg.DB.Password, cfg.DB.Host, cfg.DB.Port, cfg.DB.DBName, cfg.DB.SSLMode)

	m, err := migrate.New("file://migrations", connStr)
	if err != nil {
		appLogger.Fatal("Failed to create migrate instance", zap.Error(err))
	}

	if err := m.Up(); err != nil && err != migrate.ErrNoChange {
		appLogger.Fatal("Failed to apply migrations", zap.Error(err))
	}

	appLogger.Info("Migrations applied successfully")

	// Initialize database
	db, err := postgres.NewDB(cfg)
	if err != nil {
		appLogger.Fatal("Failed to initialize database", zap.Error(err))
	}
	defer db.Close()

	if err := db.Ping(context.Background()); err != nil {
		appLogger.Fatal("Failed to ping database", zap.Error(err))
	}

	// Initialize repository, service, and handler
	repo := postgres.NewSubscriptionRepo(db)
	services := service.NewSubscriptionService(repo, appLogger)
	handlers := handler.NewHandler(services, appLogger)

	// Set up router
	router := handlers.InitRoutes()
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start server
	appLogger.Info("Starting server on port " + cfg.Server.Port)
	if err := router.Run(":" + cfg.Server.Port); err != nil {
		appLogger.Fatal("Failed to start server", zap.Error(err))
	}
}
